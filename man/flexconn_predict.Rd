% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/flexconn_predict.R
\name{flexconn_predict_patch}
\alias{flexconn_predict_patch}
\alias{flexconn_predict}
\alias{flexconn_predict_with_patches}
\alias{flexconn_predict_with_volume}
\title{Predict from FLEXCONN model}
\usage{
flexconn_predict_patch(
  model,
  t1,
  flair,
  t2 = NULL,
  mask = NULL,
  patchsize,
  verbose = TRUE,
  ...,
  batch_size = 1
)

flexconn_predict(
  model,
  t1,
  flair,
  t2 = NULL,
  mask = NULL,
  type = c("volume", "patch"),
  patchsize,
  verbose = TRUE,
  normalize = TRUE,
  ...,
  batch_size = 1
)

flexconn_predict_with_patches(
  model,
  t1,
  flair,
  t2 = NULL,
  mask = NULL,
  patchsize,
  verbose = TRUE,
  ...,
  batch_size = 1
)

flexconn_predict_with_volume(
  model,
  t1,
  flair,
  t2 = NULL,
  verbose = TRUE,
  normalize = TRUE,
  ...,
  batch_size = 1
)
}
\arguments{
\item{model}{A keras model object trained}

\item{t1}{3D array or \code{nifti} image}

\item{flair}{3D array or \code{nifti} image}

\item{t2}{3D array or \code{nifti} image, optional if model has this}

\item{mask}{binary 3D array or \code{nifti} image, but of
the whole area of prediction, not the ground truth}

\item{patchsize}{Vector of length 2 (or more)}

\item{verbose}{print diagnostic messages}

\item{...}{additional arguments to \code{\link{get_patches}}}

\item{batch_size}{Size of batches for prediction.
Integer. Passed to
\code{\link[keras]{predict.keras.engine.training.Model}}.}

\item{type}{type of prediction to use, patch-based or slice/volume
based}

\item{normalize}{Run \code{\link{normalize_image}} on the image
before prediction}
}
\value{
A vector of predictions, based on the indices of the
mask
}
\description{
Predict from FLEXCONN model
}
\note{
If \code{mask = NULL}, a mask will be generated for
\code{t1 > 0}.
}
\examples{
\dontrun{
model_file = tempfile(fileext = ".h5")
base_url = paste0("https://github.com/muschellij2/flexconnr",
"/raw/master/inst/extdata/")
model_url = paste0(base_url, "21atlases/",
"atlas_with_mask1/FLEXCONNmodel2D_35x35_17-10-2017_21-53-35.h5")
download.file(model_url, destfile = model_file)

t1_file = tempfile(fileext = ".nii.gz")
download.file(paste0(base_url, "T1.nii.gz"), destfile = t1_file)

flair_file = tempfile(fileext = ".nii.gz")
download.file(paste0(base_url, "FLAIR.nii.gz"), destfile = flair_file)

model = keras::load_model_hdf5(model_file)
res = flexconn_predict(model,
t1 = t1_file,
flair = flair_file)
}

}
